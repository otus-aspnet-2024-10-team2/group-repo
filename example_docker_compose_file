

services:
    client:
        image: client_app
        build:
            context: ./client_notification
            dockerfile: Dockerfile
        ports:
            - "3000:80"
        # Добавляем healthcheck для проверки готовности
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:80"]
            interval: 5s
            timeout: 5s
            retries: 5
        depends_on:
            - notification-service
        networks:
            - app-network
    
    notification-service:
        build:
            context: ./NotificatoinServicesApp
            dockerfile: Dockerfile
        ports:
            - "5001:8080"
        environment:
            - ASPNETCORE_ENVIRONMENT=Development
            - ConnectionStrings__PSQLConnectionString=Host=db;Port=5432;Database=NotificationDB;UserId=postgres;Password=password;
        # depends_on:
        #     - db
        networks:
        - app-network
    
    db:
        image: postgres:15-alpine
        #  user: "501:20"  # использовать если запускаешь на MacOs
        volumes:
            - ./postgres-data:/var/lib/postgresql/data
        environment:
        - POSTGRES_USER=postgres
        - POSTGRES_PASSWORD=password
        - POSTGRES_DB=NotificationDB        
        networks:
            - app-network
        ports:
            - "5432:5432"    #Если докер завалит контейнер из-за рабочего порта 5432, смести индекс на единицу. То есть 5433 - 5433:5432
    
volumes:
    postgres-data:
        # driver: local
        # driver_opts:
        #     type: none
        #     o: bind
        #     device: ./postgres-data  # Альтернатива для bind mount через объявление тома

networks:
    app-network:
        driver: bridge
